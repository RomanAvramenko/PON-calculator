{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["Modal","lazy","Selector","Result","SplitterList","Inputs","Map","App","useState","start","setStart","length","setLength","splices","setSplices","modal","setModal","mapModal","setMapModal","childData","setChildData","className","fallback","show","callback","data","handleClose","handleMapLength","mapLength","handleLength","e","target","value","handleMapModal","handleStart","count","handleCount","handleModal","change","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e904053.chunk.js","sourcesContent":["import { useState, lazy, Suspense } from \"react\";\r\nimport \"./App.scss\";\r\n\r\nconst Modal = lazy(() => import(\"./components/modal/Modal\"));\r\nconst Selector = lazy(() => import(\"./components/selector/Selector\"));\r\nconst Result = lazy(() => import(\"./components/result/Result\"));\r\nconst SplitterList = lazy(() =>\r\n  import(\"./components/splitterList/SplitterList\")\r\n);\r\nconst Inputs = lazy(() => import(\"./components/inputs/Inputs\"));\r\nconst Map = lazy(() => import(\"./components/map/Map\"));\r\n\r\nconst renderLoader = () => <p>Loading</p>;\r\n\r\nexport const App = () => {\r\n  const [start, setStart] = useState(0);\r\n  const [length, setLength] = useState(0);\r\n  const [splices, setSplices] = useState(0);\r\n  const [modal, setModal] = useState(false);\r\n  const [mapModal, setMapModal] = useState(false);\r\n  const [childData, setChildData] = useState([]);\r\n\r\n  const handleStart = (e) => {\r\n    setStart(e.target.value);\r\n  };\r\n  const handleLength = (e) => {\r\n    setLength(e.target.value);\r\n  };\r\n\r\n  const handleMapModal = () => {\r\n    setMapModal(true);\r\n  };\r\n\r\n  const handleMapLength = (mapLength) => {\r\n    setLength(+mapLength);\r\n    setMapModal(false);\r\n  };\r\n\r\n  const handleCount = (e) => {\r\n    setSplices(e.target.value);\r\n  };\r\n\r\n  const handleModal = () => {\r\n    setModal(true);\r\n  };\r\n  const handleAdd = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  const handleCallback = (data) => {\r\n    setChildData([...childData, data]);\r\n    setSplices(+splices + 1);\r\n  };\r\n\r\n  const handleChange = (data) => {\r\n    setChildData(data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Suspense fallback={renderLoader()}>\r\n        {modal && (\r\n          <Modal show={modal}>\r\n            <Selector callback={handleCallback} handleClose={handleAdd} />\r\n          </Modal>\r\n        )}\r\n        {mapModal ? (\r\n          <Modal show={mapModal}>\r\n            <Map handleMapLength={handleMapLength} />\r\n          </Modal>\r\n        ) : null}\r\n        <Inputs\r\n          length={length}\r\n          handleLength={handleLength}\r\n          handleMapModal={handleMapModal}\r\n          start={start}\r\n          handleStart={handleStart}\r\n          count={splices}\r\n          handleCount={handleCount}\r\n          handleModal={handleModal}\r\n        />\r\n        <SplitterList data={childData} change={handleChange} />\r\n        <Result\r\n          data={childData}\r\n          start={start}\r\n          length={length}\r\n          splices={splices}\r\n        />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\"This web app is being served cache-first by a service \");\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {\r\n      \"Service-Worker\": \"script\",\r\n    },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}